// Generated by CoffeeScript 1.10.0
(function() {
  var Base, Notifier,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  Base = require('./../base');

  Notifier = (function(superClass) {
    extend(Notifier, superClass);


    /**
     * @override
     */

    Notifier.prototype.TYPE = 'Notifier';


    /**
     * @protected
     * @type {number}
     */

    Notifier.prototype._firstDelay = 3000;


    /**
     * @protected
     * @type {number}
     */

    Notifier.prototype._nextDelay = 10000;


    /**
     * @override
     */

    function Notifier(server, config, index) {
      this._makeMessage = bind(this._makeMessage, this);
      this._onNotify = bind(this._onNotify, this);
      Notifier.__super__.constructor.call(this, server, config, index);
      this._firstDelay = this._checkConfig(config, 'firstDelay', 'number', this._firstDelay);
      this._nextDelay = this._checkConfig(config, 'nextDelay', 'number', this._nextDelay);
      this.on('notify', this._onNotify);
    }


    /**
     * @protected
     * @param {Action} action
     * @param {Array} args
     */

    Notifier.prototype._onNotify = function() {
      var action, args;
      action = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      return this.log('error', "_onNotify method is abstract function");
    };


    /**
     * @protected
     * @param {Action} action
     * @param {Array} args
     * @return {string}
     */

    Notifier.prototype._makeMessage = function() {
      var action, args, message, ref;
      action = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      message = (ref = action.message) != null ? ref : '%s';
      message = util.format.apply(util, [message].concat(slice.call(args)));
      return message;
    };

    return Notifier;

  })(Base);

  module.exports = Notifier;

}).call(this);

//# sourceMappingURL=notifier.js.map
