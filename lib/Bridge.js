// Generated by CoffeeScript 1.10.0
(function() {
  var Bridge, EventEmitter, core,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  EventEmitter = require('events').EventEmitter;

  core = require('./core');

  Bridge = (function(superClass) {
    extend(Bridge, superClass);


    /**
     * @public
     * @type {Board}
     */

    Bridge.prototype.board = null;


    /**
     * @public
     * @type {Object}
     */

    Bridge.prototype.config = null;


    /**
     * @public
     * @type {Blynk.Blynk.WidgetBridge}
     */

    Bridge.prototype.widgetBridge = null;


    /**
     * @public
     * @type {string}
     */

    Bridge.prototype.name = '';

    function Bridge(board, config, vPin) {
      this._onNotify = bind(this._onNotify, this);
      this._onReceivePong = bind(this._onReceivePong, this);
      this._onReceivePing = bind(this._onReceivePing, this);
      this.ping = bind(this.ping, this);
      this.connect = bind(this.connect, this);
      core.logger.debug("Construct " + config.name + " bridge objects was started.");
      this.board = board;
      this.config = config;
      this.widgetBridge = new this.board.blynk.WidgetBridge(vPin);
      if (!config.name) {
        core.logger.error("config.name was not defined.");
        process.exit(1);
      }
      this.name = config.name;
      this.on('$ping', this._onReceivePing);
      this.on('$pong', this._onReceivePong);
      this.on('$notify', this._onNotify);
      core.logger.debug("Construct '" + this.name + "' bridge objects was finished.");
    }

    Bridge.prototype.connect = function() {
      core.logger.debug("Connect '" + this.name + "' bridge was started.");
      this.widgetBridge.setAuthToken(this.config.token);
      core.logger.debug("Connect '" + this.name + "' bridge was finished.");
      return setInterval(this.ping, 60000);
    };

    Bridge.prototype.ping = function() {
      core.logger.info("Ping to '" + this.name + "' bridge, waiting Pong...");
      return this.widgetBridge.virtualWrite(0, '$ping');
    };

    Bridge.prototype._onReceivePing = function() {
      core.logger.info("Ping from '" + this.name + "' bridge, response Pong.");
      return this.widgetBridge.virtualWrite(0, '$pong');
    };

    Bridge.prototype._onReceivePong = function() {
      return core.logger.info("Pong from '" + this.name + "' bridge.");
    };

    Bridge.prototype._onNotify = function(message) {
      return core.logger.info("Notify from '" + this.name + "' bridge, message='" + message + "'");
    };

    return Bridge;

  })(EventEmitter);

  module.exports = Bridge;

}).call(this);

//# sourceMappingURL=Bridge.js.map
