// Generated by CoffeeScript 1.10.0
(function() {
  var Bridge, EventEmitter, core,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  EventEmitter = require('events').EventEmitter;

  core = require('./core');

  Bridge = (function(superClass) {
    extend(Bridge, superClass);


    /**
     * @const
     * @type {Object}
     */

    Bridge.prototype.STATUS_TYPE = {
      constructing: {
        label: 'Constructing'
      },
      connecting: {
        label: 'Connecting'
      },
      ready: {
        label: 'Ready'
      },
      error: {
        label: 'Error'
      }
    };


    /**
     * @public
     * @type {Board}
     */

    Bridge.prototype.board = null;


    /**
     * @public
     * @type {Object}
     */

    Bridge.prototype.config = null;


    /**
     * @public
     * @type {Blynk.Blynk.WidgetBridge}
     */

    Bridge.prototype.widgetBridge = null;


    /**
     * @public
     * @type {string}
     */

    Bridge.prototype.name = '';


    /**
     * @public
     * @type {Object}
     */

    Bridge.prototype.status = Bridge.prototype.STATUS_TYPE.constructing;


    /*
     * @protected
     * @type {boolean}
     */

    Bridge.prototype._pinging = false;


    /*
     * @protected
     * @type {number}
     */

    Bridge.prototype._pingIntervalMs = 60000;


    /*
     * @protected
     * @type {number}
     */

    Bridge.prototype._pingTimeoutMs = 5000;


    /**
     * @protected
     * @type {number}
     */

    Bridge.prototype._pingFailureLimit = 3;


    /**
     * @protected
     * @type {number}
     */

    Bridge.prototype._pingFailureCount = 0;


    /**
     * @protected
     * @type {number}
     */

    Bridge.prototype._pingIntervalId = 0;

    function Bridge(board, config, vPin) {
      this._onNotify = bind(this._onNotify, this);
      this._onPong = bind(this._onPong, this);
      this._onPing = bind(this._onPing, this);
      this._pingTimeout = bind(this._pingTimeout, this);
      this._ping = bind(this._ping, this);
      this.connect = bind(this.connect, this);
      var ref, ref1, ref2, ref3, ref4, ref5;
      core.logger.debug("Construct " + config.name + " bridge objects was started.");
      this.board = board;
      this.config = config;
      this.widgetBridge = new this.board.blynk.WidgetBridge(vPin);
      if (!config.name) {
        core.logger.error("config.name was not defined.");
        process.exit(1);
      }
      this.name = config.name;
      this._pingIntervalMs = (ref = (ref1 = this.config) != null ? ref1.ping.interval : void 0) != null ? ref : this._pingIntervalMs;
      this._pingTimeoutMs = (ref2 = (ref3 = this.config) != null ? ref3.ping.timeout : void 0) != null ? ref2 : this._pingTimeoutMs;
      this._pingFailureLimit = (ref4 = (ref5 = this.config) != null ? ref5.ping.failureLimit : void 0) != null ? ref4 : this._pingFailureLimit;
      this.on('$ping', this._onPing);
      this.on('$pong', this._onPong);
      this.on('$notify', this._onNotify);
      core.logger.debug("Construct '" + this.name + "' bridge objects was finished.");
    }

    Bridge.prototype.connect = function() {
      core.logger.info("Connect '" + this.name + "' bridge was started.");
      this.status = this.STATUS_TYPE.connecting;
      this.widgetBridge.setAuthToken(this.config.token);
      core.logger.info("Connect '" + this.name + "' bridge was finished.");
      core.logger.info("'" + this.name + "' bridge ping setting, interval=" + this._pingIntervalMs + "ms timeout=" + this._pingTimeoutMs + "ms failureLimit=" + this._pingFailureLimit);
      this._pingIntervalId = setInterval(this._ping, this._pingIntervalMs);
      return this.status = this.STATUS_TYPE.ready;
    };

    Bridge.prototype._ping = function() {
      core.logger.info("Ping to '" + this.name + "' bridge, waiting Pong...");
      if (!this._pinging) {
        this.widgetBridge.virtualWrite(0, '$ping');
      }
      this._pinging = true;
      return setTimeout(this._pingTimeout, this._pingTimeoutMs);
    };

    Bridge.prototype._pingTimeout = function() {
      if (this._pinging) {
        this._pingFailureCount++;
        core.logger.error("Ping to '" + this.name + "' bridge is no response, failure count " + this._pingFailureCount + " / " + this._pingFailureLimit + ".");
        this._pinging = false;
        if (this._pingFailureCount > this._pingFailureLimit) {
          core.logger.error("Ping to '" + this.name + "' bridge failed " + this._pingFailureCount + " times, this bridge will stop.");
          clearInterval(this._pingIntervalId);
          return this.status = this.STATUS_TYPE.error;
        }
      }
    };

    Bridge.prototype._onPing = function() {
      core.logger.info("Ping from '" + this.name + "' bridge, response Pong.");
      return this.widgetBridge.virtualWrite(0, '$pong');
    };

    Bridge.prototype._onPong = function() {
      core.logger.info("Pong from '" + this.name + "' bridge.");
      this._pinging = false;
      return this._pingFailureCount = 0;
    };

    Bridge.prototype._onNotify = function(message) {
      return core.logger.info("Notify from '" + this.name + "' bridge, message='" + message + "'");
    };

    return Bridge;

  })(EventEmitter);

  module.exports = Bridge;

}).call(this);

//# sourceMappingURL=Bridge.js.map
