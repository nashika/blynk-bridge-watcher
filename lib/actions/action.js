// Generated by CoffeeScript 1.10.0
(function() {
  var Action, Base,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  Base = require('../base');

  Action = (function(superClass) {
    extend(Action, superClass);


    /**
     * @protected
     * @type {string}
     */

    Action.prototype.type = '';


    /**
     * @override
     */

    function Action(parent, config) {
      this._addSubAction = bind(this._addSubAction, this);
      this.run = bind(this.run, this);
      Action.__super__.constructor.call(this, parent, config);
      this.type = this._checkConfig(config, 'type', 'string');
    }


    /**
     * @public
     * @param {Base} caller
     */

    Action.prototype.run = function() {
      var args, caller;
      caller = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      return this.log('error', "Action.run is abstract function");
    };

    Action.prototype._addSubAction = function(parent, config, key) {
      var ActionGenerator, generator, name, subActionConfig;
      ActionGenerator = require('./action-generator');
      subActionConfig = this._checkConfig(config, key, ['string', 'object'], '');
      if (subActionConfig === '' || typeof subActionConfig === 'string') {
        return subActionConfig;
      } else {
        name = this.name + '$' + key;
        subActionConfig.name = name;
        generator = new ActionGenerator(parent);
        parent.actions[name] = generator.generate(parent, subActionConfig, Object.keys(parent.actions).length);
        return name;
      }
    };

    return Action;

  })(Base);

  module.exports = Action;

}).call(this);

//# sourceMappingURL=action.js.map
