// Generated by CoffeeScript 1.10.0
(function() {
  var PinAction, ReadAction,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  PinAction = require('./pin-action');

  ReadAction = (function(superClass) {
    extend(ReadAction, superClass);


    /**
     * @protected
     * @type {string}
     */

    ReadAction.prototype._next = '';


    /**
     * @override
     */

    function ReadAction(parent, config) {
      this.run = bind(this.run, this);
      ReadAction.__super__.constructor.call(this, parent, config);
      this._next = this._addSubAction(parent, config, 'next');
    }


    /**
     * @override
     */

    ReadAction.prototype.run = function() {
      var args, bridge, command;
      bridge = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      this.log('debug', "Read action. type=" + this._pinType + ", pin=" + this._pin);
      switch (this._pinType) {
        case 'digital':
          command = 'dr';
          break;
        case 'analog':
          command = 'ar';
          break;
        case 'virtual':
          command = 'vr';
      }
      return bridge.send(command, this._pin, (function(_this) {
        return function() {
          var args;
          args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
          if (_this._next) {
            return bridge.emit.apply(bridge, [_this._next, bridge].concat(slice.call(args)));
          }
        };
      })(this));
    };

    return ReadAction;

  })(PinAction);

  module.exports = ReadAction;

}).call(this);

//# sourceMappingURL=read-action.js.map
