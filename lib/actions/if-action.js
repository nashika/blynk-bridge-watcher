// Generated by CoffeeScript 1.10.0
(function() {
  var Action, IfAction,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  Action = require('./action');

  IfAction = (function(superClass) {
    extend(IfAction, superClass);


    /**
     * @protected
     * @type {string}
     */

    IfAction.prototype._operator = '';


    /**
     * @protected
     * @type {number}
     */

    IfAction.prototype._value = -1;


    /**
     * @protected
     * @type {string}
     */

    IfAction.prototype._then = '';


    /**
     * @protected
     * @type {string}
     */

    IfAction.prototype._else = '';


    /**
     * @override
     */

    function IfAction(parent, config) {
      this.run = bind(this.run, this);
      IfAction.__super__.constructor.call(this, parent, config);
      this._operator = this._checkConfig(config, 'operator', 'string');
      this._value = this._checkConfig(config, 'value', 'number');
      this._then = this._addSubAction(parent, config, 'then');
      this._else = this._addSubAction(parent, config, 'else');
    }


    /**
     * @override
     */

    IfAction.prototype.run = function() {
      var arg, args, bridge, result;
      bridge = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      if (args.length < 1) {
        this.log('warn', "If action called no argument.");
        return;
      }
      arg = parseInt(args[0]);
      if (isNaN(arg)) {
        this.log('warn', "If action called not integer argument. arg='" + args[0] + "'");
        return;
      }
      result = false;
      switch (this._operator) {
        case '=':
        case '==':
          result = arg === this._value;
          break;
        case '<':
          result = arg < this._value;
          break;
        case '>':
          result = arg > this._value;
          break;
        case '<=':
          result = arg <= this._value;
          break;
        case '>=':
          result = arg >= this._value;
          break;
        case '!=':
        case '<>':
          result = arg !== this._value;
          break;
        default:
          this.log('warn', "Operator '" + this._operator + "' is invalid.");
          return;
      }
      this.log('debug', "If action. '(" + arg + " " + this._operator + " " + this._value + ") = " + result + "'");
      if (result && this._then) {
        return bridge.emit.apply(bridge, [this._then, bridge].concat(slice.call(args)));
      } else if (!result && this._else) {
        return bridge.emit.apply(bridge, [this._else, bridge].concat(slice.call(args)));
      }
    };

    return IfAction;

  })(Action);

  module.exports = IfAction;

}).call(this);

//# sourceMappingURL=if-action.js.map
