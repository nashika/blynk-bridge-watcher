// Generated by CoffeeScript 1.10.0
(function() {
  var Base, EventEmitter, dot,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  EventEmitter = require('events');

  dot = require('dot-object');

  Base = (function(superClass) {
    extend(Base, superClass);


    /**
     * @protected
     * @type {string}
     */

    Base.prototype.name = '';


    /**
     * @public
     * @type {Base}
     */

    Base.prototype.parent = null;


    /**
     * @protected
     * @type {Logger}
     */

    Base.prototype._logger = null;


    /**
     * @constructor
     * @param {Base} parent
     * @param {Object} config
     * @param {Logger} logger
     */

    function Base(parent, config, logger) {
      this._keyLabel = bind(this._keyLabel, this);
      this._initializeChildrenWithGenerator = bind(this._initializeChildrenWithGenerator, this);
      this._initializeChildren = bind(this._initializeChildren, this);
      this._checkConfig = bind(this._checkConfig, this);
      this.allKeyLabel = bind(this.allKeyLabel, this);
      this.log = bind(this.log, this);
      var ref, ref1;
      this.parent = parent;
      this._logger = (ref = (ref1 = this.parent) != null ? ref1._logger : void 0) != null ? ref : logger;
      this.name = this._checkConfig(config, 'name', 'string');
      this.log('trace', "Constructing " + this.constructor.name + " object.");
    }

    Base.prototype.log = function() {
      var args, level, ref, ref1;
      level = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      if (this.parent) {
        return (ref = this._logger).log.apply(ref, [level, this.allKeyLabel()].concat(slice.call(args)));
      } else {
        return (ref1 = this._logger).log.apply(ref1, [level].concat(slice.call(args)));
      }
    };


    /**
     * @protected
     * @return {string}
     */

    Base.prototype.allKeyLabel = function() {
      var args, ref;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      if (this.parent) {
        return (ref = this.parent).allKeyLabel.apply(ref, [this._keyLabel()].concat(slice.call(args)));
      } else {
        return '[' + args.join('->') + ']';
      }
    };


    /**
     * Check config object and return picked element.
     *
     * @protected
     * @param {Object} config
     * @param {string} key
     * @param {string|Array.<string>} types
     * @param {*} defaultValue
     * @return {*} picked config
     */

    Base.prototype._checkConfig = function(config, key, types, defaultValue) {
      var i, j, len, len1, target, type;
      if (defaultValue == null) {
        defaultValue = void 0;
      }
      if ((typeof config !== 'object') || Array.isArray(config)) {
        this.log('fatal', this.allKeyLabel(), "Check config. 'config' is not object.");
        process.exit(1);
      }
      target = dot.pick(key, config);
      if (typeof target === 'undefined') {
        if (defaultValue !== void 0) {
          return defaultValue;
        } else {
          this.log('fatal', this.allKeyLabel(), "Check config. 'config." + key + "' is undefined.");
          process.exit(1);
        }
      }
      if (typeof types === 'string') {
        types = [types];
      }
      if (types[0] === 'in') {
        types.shift();
        for (i = 0, len = types.length; i < len; i++) {
          type = types[i];
          if (target === type) {
            return target;
          }
        }
        this.log('fatal', this.allKeyLabel(), "Check config. 'config." + key + "' value=" + target + " is unexpected, expects " + (JSON.stringify(types)) + ".");
      } else {
        for (j = 0, len1 = types.length; j < len1; j++) {
          type = types[j];
          if (type === 'array') {
            if (Array.isArray(target)) {
              return target;
            }
          } else {
            if (typeof target === type) {
              return target;
            }
          }
        }
        this.log('fatal', this.allKeyLabel(), "Check config. 'config." + key + "' type=" + (typeof target) + " is unexpected, expects " + (JSON.stringify(types)) + ".");
      }
      return process.exit(1);
    };


    /**
     * @protected
     *
     */

    Base.prototype._initializeChildren = function(config, key, ChildClass) {
      var childConfig, childrenConfig, i, len;
      childrenConfig = this._checkConfig(config, key, 'array');
      this.log('debug', "Construct child '" + key + "' objects was started.");
      this[key] = {};
      for (i = 0, len = childrenConfig.length; i < len; i++) {
        childConfig = childrenConfig[i];
        this[key][childConfig.name] = new ChildClass(this, childConfig, Object.keys(this[key]).length);
      }
      return this.log('debug', "Construct child '" + key + "' objects was finished.");
    };

    Base.prototype._initializeChildrenWithGenerator = function(config, key, ChildGenerator) {
      var childConfig, childrenConfig, generator, i, len;
      childrenConfig = this._checkConfig(config, key, 'array');
      this.log('debug', "Construct child '" + key + "' objects was started.");
      this[key] = {};
      generator = new ChildGenerator(this);
      for (i = 0, len = childrenConfig.length; i < len; i++) {
        childConfig = childrenConfig[i];
        this[key][childConfig.name] = generator.generate(this, childConfig, Object.keys(this[key]).length);
      }
      return this.log('debug', "Construct child '" + key + "' objects was finished.");
    };


    /**
     * @protected
     * @return {string}
     */

    Base.prototype._keyLabel = function() {
      return this.name + "(" + this.constructor.name + ")";
    };

    return Base;

  })(EventEmitter);

  module.exports = Base;

}).call(this);

//# sourceMappingURL=base.js.map
