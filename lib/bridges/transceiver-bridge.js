// Generated by CoffeeScript 1.10.0
(function() {
  var BaseBridge, TransceiverBridge, uid,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  BaseBridge = require('./base-bridge');

  uid = require('../common/uid');

  TransceiverBridge = (function(superClass) {
    extend(TransceiverBridge, superClass);


    /**
     * @protected
     * @type {Object}
     */

    TransceiverBridge.prototype._sendCallbacks = null;


    /**
     * @override
     */

    function TransceiverBridge(parent, config) {
      this.write = bind(this.write, this);
      this.sendCallback = bind(this.sendCallback, this);
      this.send = bind(this.send, this);
      TransceiverBridge.__super__.constructor.call(this, parent, config);
      this._sendCallbacks = {};
    }


    /**
     * @public
     * @param {string} output
     */

    TransceiverBridge.prototype.send = function() {
      var callback, command, i, output, param, params, pin, ref, ref1, requestId;
      command = arguments[0], params = 3 <= arguments.length ? slice.call(arguments, 1, i = arguments.length - 1) : (i = 1, []), callback = arguments[i++];
      if (this.status !== this.STATUS_TYPES.ready) {
        return;
      }
      pin = (ref = params[0]) != null ? ref : 0;
      param = (ref1 = params[1]) != null ? ref1 : '';
      while (true) {
        requestId = uid(3);
        if (this._sendCallbacks[requestId]) {
          continue;
        }
        this._sendCallbacks[requestId] = callback;
        break;
      }
      output = requestId + "," + command + "," + pin + "," + param;
      this.log('trace', "Send output data, bridge='" + this.name + "' output='" + output + "'");
      return this._widgetBridge.virtualWrite(0, output);
    };

    TransceiverBridge.prototype.sendCallback = function() {
      var args, callback, requestId;
      requestId = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      if (!(callback = this._sendCallbacks[requestId])) {
        this.log('warn', "Request callback key='" + requestId + "' not found.");
        return;
      }
      callback.apply(null, args);
      return delete this._sendCallbacks[requestId];
    };

    TransceiverBridge.prototype.write = function(type, pin, value) {
      if (this.status !== this.STATUS_TYPES.ready) {
        return;
      }
      switch (type) {
        case 'digital':
          return this._widgetBridge.digitalWrite(pin, value);
        case 'analog':
          return this._widgetBridge.analogWrite(pin, value);
        case 'virtual':
          return this._widgetBridge.virtualWrite(pin, value);
      }
    };

    return TransceiverBridge;

  })(BaseBridge);

  module.exports = TransceiverBridge;

}).call(this);

//# sourceMappingURL=transceiver-bridge.js.map
