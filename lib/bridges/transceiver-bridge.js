// Generated by CoffeeScript 1.10.0
(function() {
  var BaseBridge, TransceiverBridge, uid,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  BaseBridge = require('./base-bridge');

  uid = require('../common/uid');

  TransceiverBridge = (function(superClass) {
    extend(TransceiverBridge, superClass);


    /**
     * @protected
     * @type {Object}
     */

    TransceiverBridge.prototype._sendCallbacks = null;


    /**
     * @override
     */

    function TransceiverBridge(parent, config, index) {
      this.sendCallback = bind(this.sendCallback, this);
      this.send = bind(this.send, this);
      TransceiverBridge.__super__.constructor.call(this, parent, config, index);
      this._sendCallbacks = {};
    }


    /**
     * @public
     * @param {string} output
     */

    TransceiverBridge.prototype.send = function(output, callback) {
      var requestId;
      if (output == null) {
        output = '';
      }
      while (true) {
        requestId = uid(3);
        if (this._sendCallbacks[requestId]) {
          continue;
        }
        this._sendCallbacks[requestId] = callback;
        break;
      }
      output += "," + requestId;
      this.log('debug', "Send output data, bridge='" + this.name + "' output='" + output + "'");
      return this._widgetBridge.virtualWrite(0, output);
    };

    TransceiverBridge.prototype.sendCallback = function() {
      var args, callback, requestId;
      requestId = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      if (!(callback = this._sendCallbacks[requestId])) {
        this.log('warn', "Request callback key='" + requestId + "' not found.");
        return;
      }
      callback.apply(null, args);
      return delete this._sendCallbacks[requestId];
    };

    return TransceiverBridge;

  })(BaseBridge);

  module.exports = TransceiverBridge;

}).call(this);

//# sourceMappingURL=transceiver-bridge.js.map
