// Generated by CoffeeScript 1.10.0
(function() {
  var ActionGenerator, Base, BaseBridge,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  Base = require('./../base');

  ActionGenerator = require('../actions/action-generator');

  BaseBridge = (function(superClass) {
    extend(BaseBridge, superClass);


    /**
     * @const
     * @type {Object}
     */

    BaseBridge.prototype.STATUS_TYPES = {
      constructing: {
        label: 'Constructing'
      },
      connecting: {
        label: 'Connecting'
      },
      ready: {
        label: 'Ready'
      },
      error: {
        label: 'Error'
      }
    };


    /**
     * @public
     * @type {Object}
     */

    BaseBridge.prototype.status = BaseBridge.prototype.STATUS_TYPES.constructing;


    /**
     * @public
     * @type {Object.<Action>}
     */

    BaseBridge.prototype.actions = null;


    /**
     * @protected
     * @type {string}
     */

    BaseBridge.prototype._token = '';


    /**
     * @protected
     * @type {Blynk.Blynk.WidgetBridge}
     */

    BaseBridge.prototype._widgetBridge = null;

    function BaseBridge(parent, config) {
      this.log = bind(this.log, this);
      this.connect = bind(this.connect, this);
      var action, actionName, ref;
      BaseBridge.__super__.constructor.call(this, parent, config);
      this.log('info', "Connect bridge was started.");
      this._token = this._checkConfig(config, 'token', 'string');
      this._widgetBridge = new this.parent.blynk.WidgetBridge(Object.keys(parent.bridges).length + 1);
      this._initializeChildrenWithGenerator(config, 'actions', ActionGenerator);
      ref = this.actions;
      for (actionName in ref) {
        action = ref[actionName];
        this.on(actionName, action.run);
      }
    }


    /**
     * @public
     */

    BaseBridge.prototype.connect = function() {
      this.log('info', "Connection started.");
      this.status = this.STATUS_TYPES.connecting;
      return this._widgetBridge.setAuthToken(this._token);
    };


    /**
     * @override
     */

    BaseBridge.prototype.log = function() {
      var args, level;
      level = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      BaseBridge.__super__.log.apply(this, [level].concat(slice.call(args)));
      return this.emit("$" + level, this, "" + (args.join(' ')));
    };

    return BaseBridge;

  })(Base);

  module.exports = BaseBridge;

}).call(this);

//# sourceMappingURL=base-bridge.js.map
