// Generated by CoffeeScript 1.10.0
(function() {
  var Base, EventEmitter,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  EventEmitter = require('events');

  Base = (function(superClass) {
    extend(Base, superClass);


    /**
     * @const
     * @type {string}
     */

    Base.prototype.TYPE = 'Base';


    /**
     * @public
     * @type {number}
     */

    Base.prototype.index = -1;


    /**
     * @protected
     * @type {string}
     */

    Base.prototype.name = '';


    /**
     * @protected
     * @type {Base}
     */

    Base.prototype._parent = null;


    /**
     * @protected
     * @type {Logger}
     */

    Base.prototype._logger = null;


    /**
     * @constructor
     * @param {Base} parent
     * @param {Object} config
     * @param {number} vPin
     * @param {Logger} logger
     */

    function Base(parent, config, index, logger) {
      this.checkConfig = bind(this.checkConfig, this);
      this.log = bind(this.log, this);
      this._parent = parent;
      this.index = index;
      this._logger = logger;
      this.checkConfig(config, 'config', 'object');
      this.checkConfig(config.name, 'config.name', 'string');
      this.name = config.name;
    }

    Base.prototype.log = function() {
      var args, level, ref, ref1;
      level = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      if (this._parent) {
        return (ref = this._parent).log.apply(ref, [level, "[" + this.TYPE + "[" + this.index + "-" + this.name + "]]"].concat(slice.call(args)));
      } else {
        return (ref1 = this._logger).log.apply(ref1, [level].concat(slice.call(args)));
      }
    };

    Base.prototype.checkConfig = function() {
      var args, config, key, ref, type;
      config = arguments[0], key = arguments[1], type = arguments[2], args = 4 <= arguments.length ? slice.call(arguments, 3) : [];
      if (this._parent) {
        return (ref = this._parent).checkConfig.apply(ref, [config, key, type, "[" + this.TYPE + "[" + this.index + "-" + this.name + "]]"].concat(slice.call(args)));
      } else {
        if (typeof config === 'undefined') {
          this.log.apply(this, ['fatal'].concat(slice.call(args), ["Config '" + key + "' is undefined."]));
          process.exit(1);
        }
        if ((type === 'array' ? !Array.isArray(config) : !(typeof config === type))) {
          this.log('fatal', "Config '" + key + "' is unexpected type, expects " + type + ".");
          return process.exit(1);
        }
      }
    };

    return Base;

  })(EventEmitter);

  module.exports = Base;

}).call(this);

//# sourceMappingURL=Base.js.map
