// Generated by CoffeeScript 1.10.0
(function() {
  var Base, CronJob, Job,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  CronJob = require('cron').CronJob;

  Base = require('./base');

  Job = (function(superClass) {
    extend(Job, superClass);


    /**
     * @protected
     * @type {string}
     */

    Job.prototype._cronTime = '';


    /**
     * @protected
     * @type {Bridge}
     */

    Job.prototype._bridge = '';


    /**
     * @protected
     * @type {string}
     */

    Job.prototype._action = '';


    /**
     * @protected
     * @type {CronJob}
     */

    Job.prototype._cronJob = null;


    /**
     * @override
     */

    function Job(server, config) {
      this._run = bind(this._run, this);
      var board, boardName, bridgeName, e, error;
      Job.__super__.constructor.call(this, server, config);
      this._cronTime = this._checkConfig(config, 'cronTime', 'string');
      boardName = this._checkConfig(config, 'board', 'string');
      if (!(board = this.parent.boards[boardName])) {
        this.log('fatal', "Board '" + boardName + "' was not found.");
        process.exit(1);
      }
      bridgeName = this._checkConfig(config, 'bridge', 'string');
      if (!(this._bridge = board.bridges[bridgeName])) {
        this.log('fatal', "Board '" + boardName + "' -> Bridge '" + bridgeName + "' was not found.");
        process.exit(1);
      }
      this._action = this._checkConfig(config, 'action', 'string');
      if (!this._bridge.actions[this._action]) {
        this.log('fatal', "Board '" + boardName + "' -> Bridge '" + bridgeName + "' -> Action '" + this._action + "' was not found.");
        process.exit(1);
      }
      try {
        this._cronJob = new CronJob(this._cronTime, this._run);
      } catch (error) {
        e = error;
        this.log('fatal', "cronTime '" + this._cronTime + "' is invalid format.");
        process.exit(1);
      }
      this._cronJob.start();
    }


    /**
     * @protected
     */

    Job.prototype._run = function() {
      this.log('debug', "Job '" + this.name + "' was kicked.");
      return this._bridge.emit(this._action, this._bridge);
    };

    return Job;

  })(Base);

  module.exports = Job;

}).call(this);

//# sourceMappingURL=job.js.map
