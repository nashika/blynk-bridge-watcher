// Generated by CoffeeScript 1.10.0
(function() {
  var Base, Board, Job, NotifierGenerator, Server,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Base = require('./base');

  Board = require('./board');

  NotifierGenerator = require('./notifiers/notifier-generator');

  Job = require('./job');

  Server = (function(superClass) {
    extend(Server, superClass);


    /**
     * @public
     * @type {Object.<Board>}
     */

    Server.prototype.boards = null;


    /**
     * @public
     * @type {Object.<Notifier>}
     */

    Server.prototype.notifiers = null;


    /**
     * @public
     * @type {Object.<Job>}
     */

    Server.prototype.jobs = null;

    function Server(config, logger, index) {
      var boardConfig, boards, i, j, jobConfig, jobs, k, l, len, len1, len2, notifierConfig, notifierGenerator, notifiers;
      Server.__super__.constructor.call(this, null, config, index, logger);
      boards = this._checkConfig(config, 'boards', 'array');
      this.log('debug', 'Construct board objects was started.');
      this.boards = {};
      i = 0;
      for (j = 0, len = boards.length; j < len; j++) {
        boardConfig = boards[j];
        this.boards[boardConfig.name] = new Board(this, boardConfig, i++);
      }
      this.log('debug', 'Construct board objects was finished.');
      notifiers = this._checkConfig(config, 'notifiers', 'array');
      this.log('debug', "Construct Notifier objects was started.");
      notifierGenerator = new NotifierGenerator(this);
      this.notifiers = {};
      i = 0;
      for (k = 0, len1 = notifiers.length; k < len1; k++) {
        notifierConfig = notifiers[k];
        this.notifiers[notifierConfig.name] = notifierGenerator.generate(this, notifierConfig, i++);
      }
      this.log('debug', "Construct Notifier objects was finished.");
      jobs = this._checkConfig(config, 'jobs', 'array');
      this.log('debug', "Construct Job objects was started.");
      this.jobs = {};
      i = 0;
      for (l = 0, len2 = jobs.length; l < len2; l++) {
        jobConfig = jobs[l];
        this.jobs[jobConfig.name] = new Job(this, jobConfig, i++);
      }
      this.log('debug', "Construct Job objects was finished.");
    }

    return Server;

  })(Base);

  module.exports = Server;

}).call(this);

//# sourceMappingURL=server.js.map
