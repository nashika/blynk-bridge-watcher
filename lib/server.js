// Generated by CoffeeScript 1.10.0
(function() {
  var Base, Board, NotifierGenerator, Server,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  Base = require('./base');

  Board = require('./board');

  NotifierGenerator = require('./notifiers/notifier-generator');

  Server = (function(superClass) {
    extend(Server, superClass);


    /**
     * @protected
     * @type {Object.<Board>}
     */

    Server.prototype._boards = null;


    /**
     * @protected
     * @type {Object.<Notifier>}
     */

    Server.prototype._notifiers = null;

    function Server(config, logger, index) {
      this.notify = bind(this.notify, this);
      var boardConfig, boards, i, j, k, len, len1, notifierConfig, notifierGenerator, notifiers;
      Server.__super__.constructor.call(this, null, config, index, logger);
      boards = this._checkConfig(config, 'boards', 'array');
      this.log('debug', 'Construct board objects was started.');
      this._boards = {};
      i = 0;
      for (j = 0, len = boards.length; j < len; j++) {
        boardConfig = boards[j];
        this._boards[boardConfig.name] = new Board(this, boardConfig, i++);
      }
      this.log('debug', 'Construct board objects was finished.');
      notifiers = this._checkConfig(config, 'notifiers', 'array');
      this.log('debug', "Construct Notifier objects was started.");
      notifierGenerator = new NotifierGenerator(this);
      this._notifiers = {};
      i = 0;
      for (k = 0, len1 = notifiers.length; k < len1; k++) {
        notifierConfig = notifiers[k];
        this._notifiers[notifierConfig.name] = notifierGenerator.generate(this, notifierConfig, i++);
      }
      this.log('debug', "Construct Notifier objects was finished.");
    }

    Server.prototype.notify = function() {
      var action, args, ref;
      action = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      if (this._notifiers[action.notifier]) {
        return (ref = this._notifiers[action.notifier]).emit.apply(ref, ['notify', action].concat(slice.call(args)));
      }
    };

    return Server;

  })(Base);

  module.exports = Server;

}).call(this);

//# sourceMappingURL=server.js.map
