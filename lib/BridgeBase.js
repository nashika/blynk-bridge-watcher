// Generated by CoffeeScript 1.10.0
(function() {
  var Base, BridgeBase,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Base = require('./Base');

  BridgeBase = (function(superClass) {
    extend(BridgeBase, superClass);


    /**
     * @override
     */

    BridgeBase.prototype.TYPE = 'Bridge';


    /**
     * @const
     * @type {Object}
     */

    BridgeBase.prototype.STATUS_TYPE = {
      constructing: {
        label: 'Constructing'
      },
      connecting: {
        label: 'Connecting'
      },
      ready: {
        label: 'Ready'
      },
      error: {
        label: 'Error'
      }
    };


    /**
     * @public
     * @type {Object}
     */

    BridgeBase.prototype.status = BridgeBase.prototype.STATUS_TYPE.constructing;


    /**
     * @protected
     * @type {string}
     */

    BridgeBase.prototype._token = '';


    /**
     * @protected
     * @type {Blynk.Blynk.WidgetBridge}
     */

    BridgeBase.prototype._widgetBridge = null;

    function BridgeBase(parent, config, index) {
      this.connect = bind(this.connect, this);
      BridgeBase.__super__.constructor.call(this, parent, config, index);
      this.checkConfig(config.token, 'config.token', 'string');
      this._token = config.token;
      this._widgetBridge = new this._parent.blynk.WidgetBridge(index + 1);
    }


    /**
     * @public
     */

    BridgeBase.prototype.connect = function() {
      this.status = this.STATUS_TYPE.connecting;
      this._widgetBridge.setAuthToken(this._token);
      return this.status = this.STATUS_TYPE.ready;
    };

    return BridgeBase;

  })(Base);

  module.exports = BridgeBase;

}).call(this);

//# sourceMappingURL=BridgeBase.js.map
