// Generated by CoffeeScript 1.10.0
(function() {
  var BridgeBase, EventEmitter, core,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  EventEmitter = require('events').EventEmitter;

  core = require('./core');

  BridgeBase = (function(superClass) {
    extend(BridgeBase, superClass);


    /**
     * @const
     * @type {Object}
     */

    BridgeBase.prototype.STATUS_TYPE = {
      constructing: {
        label: 'Constructing'
      },
      connecting: {
        label: 'Connecting'
      },
      ready: {
        label: 'Ready'
      },
      error: {
        label: 'Error'
      }
    };


    /**
     * @public
     * @type {Board}
     */

    BridgeBase.prototype.board = null;


    /**
     * @public
     * @type {Object}
     */

    BridgeBase.prototype.config = null;


    /**
     * @public
     * @type {Blynk.Blynk.WidgetBridge}
     */

    BridgeBase.prototype.widgetBridge = null;


    /**
     * @public
     * @type {string}
     */

    BridgeBase.prototype.name = '';


    /**
     * @public
     * @type {Object}
     */

    BridgeBase.prototype.status = BridgeBase.prototype.STATUS_TYPE.constructing;


    /**
     * @constructor
     * @param {Board} board
     * @param {Object} config
     * @param {number} vPin
     */

    function BridgeBase(board, config, vPin) {
      this.log = bind(this.log, this);
      this.connect = bind(this.connect, this);
      this.board = board;
      this.config = config;
      this.widgetBridge = new this.board.blynk.WidgetBridge(vPin);
      if (!config.name) {
        this.log('error', "config.name was not defined.");
        process.exit(1);
      }
      this.name = config.name;
    }


    /**
     * @public
     */

    BridgeBase.prototype.connect = function() {
      this.status = this.STATUS_TYPE.connecting;
      this.widgetBridge.setAuthToken(this.config.token);
      return this.status = this.STATUS_TYPE.ready;
    };

    BridgeBase.prototype.log = function() {
      var args, level, ref, ref1;
      level = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      return (ref1 = core.logger).log.apply(ref1, [level, "[Bridge-" + ((ref = this.config) != null ? ref.name : void 0) + "]"].concat(slice.call(args)));
    };

    return BridgeBase;

  })(EventEmitter);

  module.exports = BridgeBase;

}).call(this);

//# sourceMappingURL=BridgeBase.js.map
