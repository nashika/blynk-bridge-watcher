// Generated by CoffeeScript 1.10.0
(function() {
  var BridgeBase, BridgePing, core,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  core = require('./core');

  BridgeBase = require('./BridgeBase');

  BridgePing = (function(superClass) {
    extend(BridgePing, superClass);


    /*
     * @protected
     * @type {boolean}
     */

    BridgePing.prototype._pinging = false;


    /*
     * @protected
     * @type {number}
     */

    BridgePing.prototype._pingIntervalMs = 60000;


    /*
     * @protected
     * @type {number}
     */

    BridgePing.prototype._pingTimeoutMs = 5000;


    /**
     * @protected
     * @type {number}
     */

    BridgePing.prototype._pingFailureLimit = 3;


    /**
     * @protected
     * @type {number}
     */

    BridgePing.prototype._pingFailureCount = 0;


    /**
     * @protected
     * @type {number}
     */

    BridgePing.prototype._pingIntervalId = 0;


    /**
     * @override
     */

    function BridgePing(board, config, vPin) {
      this._onPong = bind(this._onPong, this);
      this._onPing = bind(this._onPing, this);
      this._pingTimeout = bind(this._pingTimeout, this);
      this._ping = bind(this._ping, this);
      this.connect = bind(this.connect, this);
      var ref, ref1, ref2, ref3, ref4, ref5;
      BridgePing.__super__.constructor.call(this, board, config, vPin);
      this._pingIntervalMs = (ref = (ref1 = this.config) != null ? ref1.ping.interval : void 0) != null ? ref : this._pingIntervalMs;
      this._pingTimeoutMs = (ref2 = (ref3 = this.config) != null ? ref3.ping.timeout : void 0) != null ? ref2 : this._pingTimeoutMs;
      this._pingFailureLimit = (ref4 = (ref5 = this.config) != null ? ref5.ping.failureLimit : void 0) != null ? ref4 : this._pingFailureLimit;
      this.on('$ping', this._onPing);
      this.on('$pong', this._onPong);
      this.on('$notify', this._onNotify);
    }


    /**
     * @override
     */

    BridgePing.prototype.connect = function() {
      core.logger.info("'" + this.name + "' bridge ping setting, interval=" + this._pingIntervalMs + "ms timeout=" + this._pingTimeoutMs + "ms failureLimit=" + this._pingFailureLimit);
      return this._pingIntervalId = setInterval(this._ping, this._pingIntervalMs);
    };

    BridgePing.prototype._ping = function() {
      core.logger.info("Ping to '" + this.name + "' bridge, waiting Pong...");
      if (!this._pinging) {
        this.widgetBridge.virtualWrite(0, '$ping');
      }
      this._pinging = true;
      return setTimeout(this._pingTimeout, this._pingTimeoutMs);
    };

    BridgePing.prototype._pingTimeout = function() {
      if (this._pinging) {
        this._pingFailureCount++;
        core.logger.error("Ping to '" + this.name + "' bridge is no response, failure count " + this._pingFailureCount + " / " + this._pingFailureLimit + ".");
        this._pinging = false;
        if (this._pingFailureCount > this._pingFailureLimit) {
          core.logger.error("Ping to '" + this.name + "' bridge failed " + this._pingFailureCount + " times, this bridge will stop.");
          clearInterval(this._pingIntervalId);
          return this.status = this.STATUS_TYPE.error;
        }
      }
    };

    BridgePing.prototype._onPing = function() {
      core.logger.info("Ping from '" + this.name + "' bridge, response Pong.");
      return this.widgetBridge.virtualWrite(0, '$pong');
    };

    BridgePing.prototype._onPong = function() {
      core.logger.info("Pong from '" + this.name + "' bridge.");
      this._pinging = false;
      return this._pingFailureCount = 0;
    };

    return BridgePing;

  })(BridgeBase);

  module.exports = BridgePing;

}).call(this);

//# sourceMappingURL=BridgePing.js.map
