// Generated by CoffeeScript 1.10.0
(function() {
  var Blynk, Board, Bridge, config, core,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Blynk = require('blynk-library');

  core = require('./core');

  config = require('../config');

  Bridge = require('./Bridge');

  Board = (function() {

    /**
     * @public
     * @type {Blynk.Blynk}
     */
    Board.prototype.blynk = null;


    /**
     * @public
     * @type {Blynk.Blynk.VirtualPin}
     */

    Board.prototype.inputVPin = null;


    /**
     * @public
     * @type {Object.<Bridge>}
     */

    Board.prototype.bridges = null;


    /**
     * @constructor
     */

    function Board() {
      this.onInputVPin = bind(this.onInputVPin, this);
      this.onConnect = bind(this.onConnect, this);
      var bridgeConfig, i, j, len, ref;
      core.logger.debug("Auth dummy blynk board was started.");
      this.blynk = new Blynk.Blynk(config.board.token, {
        certs_path: './node_modules/blynk-library/certs/'
      });
      core.logger.debug("Construct Input Virtual Pin 0 was started.");
      this.inputVPin = new this.blynk.VirtualPin(0);
      core.logger.debug("Construct Input Virtual Pin 0 was finished.");
      core.logger.debug("Construct Bridge objects was started.");
      this.bridges = {};
      i = 1;
      ref = config.bridges;
      for (j = 0, len = ref.length; j < len; j++) {
        bridgeConfig = ref[j];
        core.logger.debug("Construct " + bridgeConfig.name + " Bridge objects was started.");
        this.bridges[bridgeConfig.name] = new Bridge(this, bridgeConfig, i++);
        core.logger.debug("Construct " + bridgeConfig.name + " Bridge objects was finished.");
      }
      core.logger.debug("Construct Bridge objects was finished.");
      this.inputVPin.on('write', this.onInputVPin);
      this.blynk.on('connect', this.onConnect);
    }

    Board.prototype.onConnect = function() {
      var bridgeConfig, j, len, ref, results;
      core.logger.debug("Auth dummy blynk board was finished.");
      ref = config.bridges;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        bridgeConfig = ref[j];
        results.push(this.bridges[bridgeConfig.name].connect());
      }
      return results;
    };

    Board.prototype.onInputVPin = function(param) {
      return console.log('V0 write: ' + param);
    };

    return Board;

  })();

  module.exports = Board;

}).call(this);

//# sourceMappingURL=Board.js.map
