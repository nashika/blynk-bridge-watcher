// Generated by CoffeeScript 1.10.0
(function() {
  var Base, Blynk, Board, Bridge,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  Blynk = require('blynk-library');

  Base = require('./Base');

  Bridge = require('./Bridge');

  Board = (function(superClass) {
    extend(Board, superClass);


    /**
     * @override
     */

    Board.prototype.TYPE = 'Board';


    /**
     * @public
     * @type {Blynk.Blynk}
     */

    Board.prototype.blynk = null;


    /**
     * @public
     * @type {Blynk.Blynk.VirtualPin}
     */

    Board.prototype._inputVPin = null;


    /**
     * @public
     * @type {Object.<Bridge>}
     */

    Board.prototype._bridges = null;


    /**
     * @constructor
     */

    function Board(parent, config, index) {
      this._onInputVPin = bind(this._onInputVPin, this);
      this._onConnect = bind(this._onConnect, this);
      var bridgeConfig, i, j, len, ref;
      Board.__super__.constructor.call(this, parent, config, index);
      this.checkConfig(config.token, 'config.token', 'string');
      this.log('debug', "Auth dummy blynk board was started.");
      this.blynk = new Blynk.Blynk(config.token, {
        certs_path: './node_modules/blynk-library/certs/'
      });
      this.log('debug', "Construct Input Virtual Pin 0 was started.");
      this._inputVPin = new this.blynk.VirtualPin(0);
      this.log('debug', "Construct Input Virtual Pin 0 was finished.");
      this.log('debug', "Construct Bridge objects was started.");
      this._bridges = {};
      i = 0;
      ref = config.bridges;
      for (j = 0, len = ref.length; j < len; j++) {
        bridgeConfig = ref[j];
        this._bridges[bridgeConfig.name] = new Bridge(this, bridgeConfig, i++);
      }
      this.log('debug', "Construct Bridge objects was finished.");
      this._inputVPin.on('write', this._onInputVPin);
      this.blynk.on('connect', this._onConnect);
    }

    Board.prototype._onConnect = function() {
      var bridge, bridgeName, ref, results;
      this.log('debug', "Auth dummy blynk board was finished.");
      ref = this._bridges;
      results = [];
      for (bridgeName in ref) {
        bridge = ref[bridgeName];
        results.push(bridge.connect());
      }
      return results;
    };

    Board.prototype._onInputVPin = function(param) {
      var bridgeName, eventArgs, eventName, params, ref;
      params = param[0].split(',');
      if (params.length < 2) {
        this.log('error', "Input data '" + param + "' is invalid format.");
        return;
      }
      bridgeName = params[0];
      eventName = params[1];
      eventArgs = params.splice(2);
      this.log('debug', "Receive input data, bridge='" + bridgeName + "' event='" + eventName + "' args=" + (JSON.stringify(eventArgs)));
      if (!this._bridges[bridgeName]) {
        this.log('warn', "Bridge '" + bridgeName + "' was not found.");
        return;
      }
      if (this._bridges[bridgeName].listeners(eventName).length === 0) {
        this.log('warn', "Bridge '" + bridgeName + "' not have '" + eventName + "' event.");
        return;
      }
      return (ref = this._bridges[bridgeName]).emit.apply(ref, [eventName].concat(slice.call(eventArgs)));
    };

    return Board;

  })(Base);

  module.exports = Board;

}).call(this);

//# sourceMappingURL=Board.js.map
